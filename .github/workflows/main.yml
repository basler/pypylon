# This is a basic workflow to help you get started with Actions
name: build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - '**'
    tags:
      - '*.*.*' 
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  TWINE_USERNAME: __token__
  # Uncomment the relevant lines to switch between deployment to test.pypi.org or pypi.org
  TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
  # TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
  # TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}

jobs:
  prepare:
    runs-on: ubuntu-18.04
    outputs:
      is_release_build: ${{ env.RELEASE_BUILD == '1' }}
    steps:
      - name: Installer list
        run: |
          tee pylon-installer.txt <<"EOF"
          ${PYLON_DOWNLOAD_URL_BASE_7_2}pylon_7.2.1.25747_x86_64_setup.tar.gz
          ${PYLON_DOWNLOAD_URL_BASE_7_2}pylon_7.2.1.25747_aarch64_setup.tar.gz
          ${PYLON_DOWNLOAD_URL_BASE}pylon_6.2.0.21487_armhf_setup.tar.gz
          ${PYLON_DOWNLOAD_URL_BASE}pylon-6.1.2.19990.zip
          EOF
      - uses: actions/cache@v2
        id: cache
        with:
          path: pylon-installer
          key: pylon-installer-${{ hashFiles('pylon-installer.txt') }}

      - name: Fetch installers
        if: steps.cache.outputs.cache-hit != 'true'
        env:
          PYLON_DOWNLOAD_URL_BASE: ${{ secrets.PYLON_DOWNLOAD_URL_BASE }}
          PYLON_DOWNLOAD_URL_BASE_6_2: ${{ secrets.PYLON_DOWNLOAD_URL_BASE_6_2 }}
          PYLON_DOWNLOAD_URL_BASE_6_3: ${{ secrets.PYLON_DOWNLOAD_URL_BASE_6_3 }}
          PYLON_DOWNLOAD_URL_BASE_7_2: ${{ secrets.PYLON_DOWNLOAD_URL_BASE_7_2 }}
        run: |
          mkdir pylon-installer && cd pylon-installer
          while read line; do
            url=$(eval echo "$line")
            echo "download $url"
            curl -sSfL -O "$url"
          done <../pylon-installer.txt
          echo "Download result"
          ls -l
          md5sum *

      - uses: actions/upload-artifact@v2
        with:
          name: pylon-installer
          path: pylon-installer
          
      - name: Check for release build
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "Build release for $GITHUB_REF"
          echo "RELEASE_BUILD=1" >> $GITHUB_ENV


  build-linux:
    needs: prepare
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        a: [cp36m, cp37m, cp38, cp39, cp3_10, cp3_11]
        p: [manylinux_2_27_x86_64, manylinux_2_27_aarch64, manylinux_2_24_armv7l]

        include:
          #legacy builds without (out-of-the-box) manylinux/pep-600 support
          - {a: cp34m, p: linux_x86_64  }
          - {a: cp34m, p: linux_aarch64 }
          - {a: cp34m, p: linux_armv7l  }
          - {a: cp35m, p: linux_x86_64  }
          - {a: cp35m, p: linux_aarch64 }
          - {a: cp35m, p: linux_armv7l  }

    env:
      P: ${{ matrix.p }}
      A: ${{ matrix.a }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: pylon-installer
          path: pylon-installer

      - name: Build with docker
        run: |
          pwd
          ls
          ls pylon-installer
          docker run --rm --privileged multiarch/qemu-user-static:register --reset
          ./scripts/build/build-arch.sh --platform-tag $P --abi-tag $A --pylon-dir ./pylon-installer $ARGS
          
      - uses: actions/upload-artifact@v2
        with:
          name: build-results-${{ matrix.p }}-${{ matrix.a }}
          path: dist/*
          
      - name: Upload Release Asset
        if: needs.prepare.outputs.is_release_build == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/*

      - name: Publish package to (Test)PyPI
        if: needs.prepare.outputs.is_release_build == 'true' && startsWith( matrix.p, 'manylinux' )
        run: |
          sudo pip3 install twine
          python3 -m twine upload --non-interactive --skip-existing dist/*
          
          
  build-macos:
    needs: prepare
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        a: [cp36, cp37, cp38, cp39, cp3_10, cp3_11]
    env:
      P: macosx-10.15-intel
      A: ${{ matrix.a }}
    steps:
      - uses: actions/checkout@v2
        
      - uses: actions/download-artifact@v2
        with:
          name: pylon-installer
          path: pylon-installer


      - name: Build and test
        run: |
          eval "$(pyenv init -)"
          export PATH=$HOME/.pyenv/bin:$PATH
          case $A in
            cp36)
              PYENV_VERSION="3.6"
              curl -sSfL -o python.pkg "https://www.python.org/ftp/python/3.6.8/python-3.6.8-macosx10.9.pkg"
              ;;
            cp37)
              PYENV_VERSION="3.7"
              curl -sSfL -o python.pkg "https://www.python.org/ftp/python/3.7.9/python-3.7.9-macosx10.9.pkg"
              ;;
            cp38)
              PYENV_VERSION="3.8"
              curl -sSfL -o python.pkg "https://www.python.org/ftp/python/3.8.7/python-3.8.7-macosx10.9.pkg"
              ;;
            cp39)
              PYENV_VERSION="3.9"
              curl -sSfL -o python.pkg "https://www.python.org/ftp/python/3.9.1/python-3.9.1-macosx10.9.pkg"
              ;;
            cp3_10)
              PYENV_VERSION="3.10"
              curl -sSfL -o python.pkg "https://www.python.org/ftp/python/3.10.2/python-3.10.2-macos11.pkg"
              ;;
            cp3_11)
              PYENV_VERSION="3.11"
              curl -sSfL -o python.pkg "https://www.python.org/ftp/python/3.11.0/python-3.11.0-macos11.pkg"
              ;;
            *)
              echo "Invalid python version $A"
              exit -1
              ;;
          esac
          sudo installer -pkg python.pkg -target /
          cd pylon-installer
          unzip pylon-*.zip
          hdiutil attach pylon-*.dmg
          sudo installer -pkg /Volumes/pylon\ *\ Camera\ Software\ Suite/pylon-*.pkg  -target /
          hdiutil detach /Volumes/pylon\ *\ Camera\ Software\ Suite
          brew install swig
          cd ${GITHUB_WORKSPACE}
          pip3 install numpy
          pip3 install wheel
          # pylon 6.1 is linked against 10.14
          export MACOSX_DEPLOYMENT_TARGET=10.14
          python3 setup.py test
          python3 setup.py bdist_wheel
          
      - uses: actions/upload-artifact@v2
        with:
          name: build-results-macosx-${{ matrix.a }}
          path: dist/*
     
      - name: Upload Release Asset
        if: needs.prepare.outputs.is_release_build == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/*
      
      - name: Publish package to (Test)PyPI
        if: needs.prepare.outputs.is_release_build == 'true'
        run: |
          sudo pip3 install twine
          python3 -m twine upload --non-interactive --skip-existing dist/*

  cleanup:
    if: always()
    needs: [
            prepare,
            build-linux,
            build-macos
           ]
    runs-on: ubuntu-latest
    steps:
    - uses: geekyeggo/delete-artifact@v1
      continue-on-error: true
      with:
        name: pylon-installer

     
