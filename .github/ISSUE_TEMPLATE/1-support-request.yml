name: Support request
description: Ask for support
title: "Please write a comprehensive title"
labels: ["Needs Triage"]

body:
- type: markdown
  attributes:
    value: >
      For a support request on how to operate your cameras with Basler pypylon, please use the fields below to describe your environment.

      To help Basler find the right support channel for you, please indicate where your company is located, e.g., in Germany, China, Canada, etc.

      If you feel confident, you may also indicate your company's name.

- type: textarea
  attributes:
    label: "Describe what you want to implement and what the issue & the steps to reproduce it are:"
    placeholder: |
      If you want to add code please
      use markdown formatting
      ```python
       import pypylon.pylon as py
        << your code here >>
      ```
  validations:
    required: true

- type: dropdown
  attributes:
    label: Is your camera operational in Basler pylon viewer on your platform
    description: To better understand if the issue is a core pylon/camera or a pypylon/camera issue please tell us if the camera works in Basler pylon viewer on your platform.
    options:
      - 'Yes'
      - 'No'
  validations:
    required: true

- type: textarea
  attributes:
    label: "Hardware setup used"
    description: >
      Describe your hardware setup including, e.g.,:

      * PC or embedded system model/type:
        * CPU architecture X86/X86_64/ARM/ARM64
        * Operating System
        * RAM
      * Interfaces used to connect the cameras:
        * Type in type/model/name of interface cards
        * Switches or hubs used
        * Cable types/lengths
    placeholder: |
      << Hardware setup used >>
  validations:
    required: true

- type: textarea
  attributes:
    label: "Camera(s) used"
    description: |
      List your camera(s), especially the value of DeviceFirmwareVersion.
      The command below will output all the required information.

      ```python
      import pypylon.pylon as py

      tl_factory = py.TlFactory.GetInstance()

      for dev in tl_factory.EnumerateDevices():
          print(dev.GetFriendlyName())
          try:
              camera = py.InstantCamera(tl_factory.CreateDevice(dev))
              camera.Open()
              print(camera.DeviceFirmwareVersion.Value)
              camera.Close()
          except (py.LogicalErrorException, py.RuntimeException) as error:
              print(f"Error reading camera info: {error}")
      ```
    placeholder: |
      << Camera(s) used >>
  validations:
    required: true

- type: textarea
  attributes:
    label: "Runtime information:"
    description: |
      Do you have the full Basler pylon Camera Software Suite installed in addition to pypylon?

      > In the pylon Viewer, the keys `Shift + Ctrl + Alt + i` will capture OS / software version information, that you can paste here.

      The below command will output python/pypylon and system versions. Please use the python interpreter used in your project to execute

      ```python
      import sys, pypylon.pylon, platform
      print(f'python: {sys.version}')
      print(f'platform: {sys.platform}/{platform.machine()}/{platform.release()}')
      print(f'pypylon: {pypylon.pylon.__version__} / {".".join([str(i) for i in pypylon.pylon.GetPylonVersion()])}')
      ```

      And in case of containerized applications also list the operating system and platform of the base system and platform!
    placeholder: |
      << Runtime information >>
    render: shell
  validations:
    required: true
