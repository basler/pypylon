image: Visual Studio 2022
environment:
  TWINE_USERNAME: basler
  #Enable this for testing purposes
  #TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
  TWINE_PASSWORD:
    #test.pypi password
    #secure: qtg34Wv7b/cdAuvvAnqDZA==
    #pypi passwd
    secure: pLJjpvmtL1FeCwdEWzqH1hHBsNvJTa7nxkj4lhVEKVY=

  matrix:
    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - PYTHON: "C:\\Python36-x64"
    - PYTHON: "C:\\Python37-x64"
    - PYTHON: "C:\\Python38-x64"
    - PYTHON: "C:\\Python39-x64"
    - PYTHON: "C:\\Python310-x64"
    - PYTHON: "C:\\Python311-x64"

install:
  # Install an outdated version of colorama and readme_renderer because these are the last ones with python 3.4 support (https://github.com/pypa/readme_renderer/releases/tag/25.0)
  # Otherwise wheel/twine install fails on python 3.4
  # Install setuptools >= 38.6 because this version introduced long_description_content_type which is required by current pypi
  - "%PYTHON%\\python.exe -m pip install \"colorama==0.4.1\" \"readme_renderer==24.0\" \"setuptools>=38.6.0\""

  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel twine"
  # install swig and put it on the path. Retry because of network issues with sourceforge
  - appveyor-retry curl -sSfL -o swigwin.zip https://prdownloads.sourceforge.net/swig/swigwin-4.1.1.zip
  - 7z x swigwin.zip -oC:\ > NUL
  - set PATH=C:\swigwin-4.1.1;%PATH%
  # install pylon
  - appveyor-retry curl -sSfL -o pylon_installer.exe %PYLON_DOWNLOAD_URL_BASE%Basler_pylon_7.2.1.25747.exe
  - pylon_installer.exe /quiet /install="Runtime;GigE_Support;USB_Support;Camera_Link_Support;CoaXPress_Support;GenTL_Consumer_Support;CamEmu_Support;SDKs"
  # PYLON_DEV_DIR is not available in the shell after installation, so we set it manually
  - set PYLON_DEV_DIR=%PROGRAMFILES%\Basler\pylon 7\Development
  # install numpy for the unittests
  - "%PYTHON%\\python.exe -m pip install numpy"

build_script:
  - "scripts\\build\\msvc_build_wrapper.cmd %PYTHON%\\python.exe setup.py test"
  - "scripts\\build\\msvc_build_wrapper.cmd %PYTHON%\\python.exe setup.py bdist_wheel"

test_script:
# Unit Tests fail to run on python 2.7
#  - "%PYTHON%\\python.exe -m pip install numpy"
#  - "scripts\\build\\msvc_build_wrapper.cmd %PYTHON%\\python.exe setup.py test"

artifacts:
  - path: dist\*

deploy:
  #release: pypylon-$(appveyor_build_version)
  provider: GitHub
  auth_token:
    secure: j8A/M6GD82ZXpIqm6OhRj1nxQ52/DncI074LXnkBhGFQxPQTt6Hc4ABIfdJ37sIX
  artifact: /.*\.whl/
  force_update: true
  on:
    appveyor_repo_tag: true        # deploy on tag push only

#use after_deploy instead of deploy_script as deploy_script disables the default deployment providers
after_deploy:
  - echo "Starting Artifact Deployment"
  - ps: Push-AppveyorArtifact dist/*
  - ps: If ($env:APPVEYOR_REPO_TAG -eq "true") { Invoke-Expression "$env:PYTHON\\Scripts\\twine upload --skip-existing dist/*" 2>$null } Else { write-output "Not on a tag, won't deploy to pypi"}
  - echo "Finished Artifact Deployment"
