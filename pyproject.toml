[build-system]
requires = [
    "scikit-build-core>=0.8.0",
    "setuptools_scm[toml]>=8.0",
    "swig==4.3",
    "lief; sys_platform == 'darwin'"
]
build-backend = "scikit_build_core.build"

[project]
name = "pypylon"
description = "The python wrapper for the Basler pylon Camera Software Suite."
authors = [
    {name = "Basler AG", email = "oss@baslerweb.com"}
]
readme = "README.md"
license = {text = "BSD-3-Clause"}
classifiers = [
    "Programming Language :: C++",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: Microsoft :: Windows :: Windows 7",
    "Operating System :: Microsoft :: Windows :: Windows 8", 
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Topic :: Multimedia :: Graphics :: Capture :: Digital Camera",
    "Topic :: Multimedia :: Video :: Capture",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.9"
dependencies = []
dynamic = ["version"]

[tool.setuptools_scm]
write_to = "src/pypylon/_version.py"

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.setuptools_scm"

[project.urls]
Homepage = "https://github.com/basler/pypylon"
Repository = "https://github.com/basler/pypylon"

[tool.scikit-build]
cmake.version = ">=3.20"
build.verbose = true
logging.level = "DEBUG"
wheel.expand-macos-universal-tags = true
wheel.py-api = "cp39"  # Limited API for Python 3.9+
wheel.packages = ["src/pypylon"]

[tool.scikit-build.cmake.define]
PYPYLON_USE_LIMITED_API = "ON"
PYPYLON_INCLUDE_DATA_PROCESSING = "ON"

# Additional CMake arguments (can be extended via CMAKE_ARGS environment variable)
# cmake.args = []  # Uncomment and add specific args if needed

[tool.cibuildwheel]
skip = "pp* cp36-* cp37-* cp38-*"
build-verbosity = "0"
test-requires = "pytest numpy"

[tool.pytest.ini_options]
testpaths = [
    "tests/genicam_tests",
    "tests/pylon_tests/emulated", 
    "tests/pylondataprocessing_tests",
]

[tool.cibuildwheel.windows]
archs = "AMD64"
build = "cp39-win_*"
before-all = 'echo "Building: %CIBW_BUILD%"'

[tool.cibuildwheel.macos]
archs = "x86_64 arm64"
build = "cp39-macosx_*"
before-all = 'echo "Building: $CIBW_BUILD"'
repair-wheel-command = ""
test-skip = [
    "tests/pylondataprocessing_tests"
]

[[tool.cibuildwheel.overrides]]
select = "*-macosx_arm64"
before-build = [
             '''
             echo "arm framework"
             if [ -z "${PYLON_FRAMEWORK_ARM64}" ]; then
                 echo "Set PYLON_FRAMEWORK_ARM64 to the directory where pylon.framework for arm64 is installed"
                 echo "default of /Library/Frameworks will be used"
             fi
             '''
            ]
environment = { SYSTEM_VERSION_COMPAT="0",PYLON_FRAMEWORK_LOCATION="${PYLON_FRAMEWORK_ARM64}",MACOSX_DEPLOYMENT_TARGET="14.0" }

[[tool.cibuildwheel.overrides]]
select = "*-macosx_x86_64"
before-build = [
             '''
             echo "intel framework"
             if [ -z "${PYLON_FRAMEWORK_X86_64}" ]; then
                 echo "Set PYLON_FRAMEWORK_X86_64 to the directory where pylon.framework for x86_64 is installed"
                 echo "default of /Library/Frameworks will be used"
             fi
             '''
            ]
environment = { SYSTEM_VERSION_COMPAT="0",PYLON_FRAMEWORK_LOCATION="${PYLON_FRAMEWORK_X86_64}",MACOSX_DEPLOYMENT_TARGET="14.0" }
